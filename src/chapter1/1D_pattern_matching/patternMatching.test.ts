import fs from "fs";
import patternMatching from "./patternMatching";

describe("1D: Pattern Matching Problem", () => {
  test("First test from Rosalind sample dataset", () => {
    const genome = "GATATATGCATATACTT";
    const pattern = "ATAT";
    // convert arr to string and replace commas with space
    const ans = patternMatching(genome, pattern).toString().replace(/,/g, " ");
    expect(ans).toBe("1 3 9");
  });

  test("test from Rosalind extar dataset", () => {
    const path = "./src/chapter1/1D_pattern_matching/datasets/extra.txt";
    const genome = fs.readFileSync(path, {
      encoding: "utf8",
      flag: "r",
    });
    const pattern = "ACACCA";
    // convert arr to string and replace commas with space
    const ans = patternMatching(genome, pattern).toString().replace(/,/g, " ");
    expect(ans).toBe(
      "19 24 38 49 56 80 128 164 186 225 230 239 387 403 413 419 426 471 482 508 520 604 613 618 623 646 651 679 684 691 713 727 747 770 777 784 801 829 836 841 897 947 986 991 1011 1036 1075 1148 1153 1158 1173 1186 1194 1199 1220 1232 1262 1267 1303 1329 1369 1386 1395 1407 1444 1467 1472 1477 1516 1521 1530 1555 1560 1599 1604 1625 1640 1648 1653 1666 1680 1698 1728 1733 1745 1770 1800 1805 1812 1817 1822 1856 1872 1877 1889 1933 1942 1947 1952 1972 1983 2004 2016 2021 2032 2041 2046 2073 2131 2153 2172 2218 2223 2229 2234 2272 2290 2312 2430 2440 2460 2465 2486 2497 2547 2560 2595 2645 2678 2716 2721 2745 2751 2772 2788 2793 2831 2849 2854 2860 2865 2900 2905 2911 2916 2941 2947 2960 2975 2980 2991 2996 3001 3040 3063 3081 3102 3107 3112 3124 3129 3142 3152 3157 3188 3193 3216 3224 3279 3284 3305 3310 3315 3320 3345 3357 3362 3385 3397 3402 3418 3431 3445 3517 3526 3537 3580 3585 3643 3675 3694 3712 3728 3739 3753 3772 3777 3792 3797 3824 3835 3847 3852 3857 3862 3877 3882 3888 3893 3900 3919 3930 3935 3950 4032 4053 4088"
    );
  });

  test("Rosalind submit", () => {
    const path = "./src/chapter1/1D_pattern_matching/datasets/submit.txt";
    const genome = fs.readFileSync(path, {
      encoding: "utf8",
      flag: "r",
    });
    const pattern = "TGCACCATG";
    // convert arr to string and replace commas with space
    const ans = patternMatching(genome, pattern).toString().replace(/,/g, " ");
    // console.log(ans);
    expect(ans).toBe(
      "23 54 93 100 107 114 160 167 182 277 301 342 399 434 464 471 507 676 686 720 767 853 860 902 909 916 946 953 979 986 1044 1085 1152 1253 1260 1284 1291 1324 1331 1360 1507 1532 1539 1563 1592 1627 1648 1655 1694 1758 1765 1809 1903 1910 1934 1992 2044 2051 2081 2134 2141 2148 2186 2231 2255 2306 2346 2393 2416 2454 2505 2548 2578 2632 2670 2677 2770 2806 2821 2828 3007 3022 3029 3073 3080 3136 3143 3152 3188 3297 3304 3501 3544 3617 3635 3647 3719 3789 3985 3992 4050 4057 4072 4092 4141 4156 4175 4213 4264 4271 4310 4337 4391 4406 4422 4453 4460 4498 4535 4577 4593 4727 4736 4762 4921 4928 4968 4992 5016 5023 5075 5129 5139 5163 5170 5177 5260 5299 5338 5356 5363 5380 5409 5526 5567 5574 5626 5643 5658 5669 5676 5712 5822 5874 5912 5931 5938 5982 6045 6052 6115 6155 6192 6291 6332 6347 6364 6371 6477 6484 6491 6521 6536 6551 6640 6647 6782 6800 6834 6862 6869 6894 6933 6957 6987 7037 7062 7069 7085 7102 7176 7204 7263 7381 7406 7413 7420 7454 7562 7602 7618 7691 7715 7722 7729 7780 7795 7802 7834 7933 7951 7958 8027 8062 8152 8190 8219 8235 8250 8309 8342"
    );
  });
});
